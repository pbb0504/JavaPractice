<?xml version="1.0" encoding="UTF-8" ?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans.xsd
           http://www.springframework.org/schema/aop
           http://www.springframework.org/schema/aop/spring-aop.xsd">

    <!-- 配置spring的ioc，把service对象配置进来 -->
    <bean id="accountService" class="cn.pbb.service.impl.AccountServiceImpl">

    </bean>
    <!-- spring基于xml的aop配置
     把通知bean也交给spring
     使用aop:config标签表明开始aop配置
     使用aop:aspect标签表明开始配置切面
        id:给切面提供唯一标志
        ref：指定通知类bean的id

     在aop：aspect标签内部使用对应的标签来配置通知的类型
        我们现在的示例是让printLog方法在切入点方法执行之前执行，所以是前置通知
        aop:before:前置通知
            pointcut：用于指定切入点表达式，含义指的是对业务层中哪些方法增强

        切入点表达式的写法：
            关键字：execution（表达式）
            表达式：
                访问修饰符  返回值 包名。包名。。。类名。方法名（参数列表）
            示例：public void cn.pbb.service.impl.AccountServiceImpl.saveAccount()
            访问修饰符可以省略：void cn.pbb.service.impl.AccountServiceImpl.saveAccount()
            返回值可以使用通配符标识任意返回值：* cn.pbb.service.impl.AccountServiceImpl.saveAccount()
            包名可以使用通配符表示任意包，但是有几级包就需要几个*: * *.*.*.*.AccountServiceImpl.saveAccount()
            包名可以使用..表示当前包及其子包:* *..AccountServiceImpl.saveAccount()
            类名和方法名：* *..*.*()
            方法中参数：* *..*.*(..)
                参数列表：
                    可以直接写的数据类型：
                        基本类型直接写名称          int
                        引用类型写包名.类名的方式    java.lang.String
                    可以使用通配符标识任意类型，但是必须有参数
                    可以使用..标识有无参数均可，参数可以是任意类型
            全通配写法：
                * *..*.*(..)

            实际开发中，切入点表达式的通常写法
            切到业务层实现类下的所有方法
            * cn.pbb.service.impl.*.*(..)

    -->

    <!-- 配置logger类
     -->
    <bean id="logger" class="cn.pbb.utils.Logger"/>

    <!-- 配置aop -->
    <aop:config>
        <!--配置切面-->
        <aop:aspect id="logAdvice" ref="logger">
            <!--配置通知的类型且建立通知方法和切入点方法的关联-->
            <!--在执行pointcut之前执行printLog-->
            <aop:before method="printLog" pointcut="execution(* cn.pbb.service.impl.*.*(..))"/>
        </aop:aspect>
    </aop:config>

</beans>